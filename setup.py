#!/usr/bin/env python3
"""
Simple setup script for All-in-One Reddit Brand Monitor
"""

import os
import sys

def setup_credentials():
    """Interactive setup of credentials"""
    print("üîß Reddit Brand Monitor Setup")
    print("=" * 40)
    
    # Get Reddit credentials
    print("\nüì± Reddit API Setup:")
    print("1. Go to https://www.reddit.com/prefs/apps")
    print("2. Click 'Create App' or 'Create Another App'")
    print("3. Choose 'script' type")
    print("4. Enter any name and description")
    print("5. Copy the credentials below:\n")
    
    reddit_client_id = input("Reddit Client ID: ").strip()
    reddit_client_secret = input("Reddit Client Secret: ").strip()
    
    # Get HuggingFace token (optional)
    print("\nü§ó HuggingFace API Setup (Optional - for sentiment analysis):")
    print("1. Go to https://huggingface.co/settings/tokens")
    print("2. Create a new token (free account works)")
    print("3. Enter token below (or press Enter to skip):\n")
    
    hf_token = input("HuggingFace Token (optional): ").strip()
    
    # Get brands to track
    print("\nüè∑Ô∏è Brand Configuration:")
    print("Enter the brands you want to track (comma-separated):")
    print("Example: mybrand, competitor1, competitor2\n")
    
    brands_input = input("Brands to track: ").strip()
    brands = [brand.strip() for brand in brands_input.split(',') if brand.strip()]
    
    if not brands:
        brands = ['badinka', 'iheartraves']  # Default brands
        print(f"Using default brands: {', '.join(brands)}")
    
    # Create environment variables
    env_vars = [
        f"export REDDIT_CLIENT_ID='{reddit_client_id}'",
        f"export REDDIT_CLIENT_SECRET='{reddit_client_secret}'",
        f"export HF_API_TOKEN='{hf_token}'",
        f"export PORT='5000'"
    ]
    
    # Save to .env file
    with open('.env', 'w') as f:
        f.write("# Reddit Brand Monitor Configuration\n")
        f.write("# Generated by setup.py\n\n")
        for var in env_vars:
            f.write(var.replace('export ', '') + '\n')
    
    # Update brands in the main file
    try:
        with open('all_in_one_reddit_monitor.py', 'r') as f:
            content = f.read()
        
        # Create brands dictionary
        brands_dict = {}
        for brand in brands:
            # Create regex pattern for each brand
            brands_dict[brand.lower()] = f"r'[@#]?{brand.lower()}(?:\\.com)?'"
        
        brands_str = "{\n"
        for brand, pattern in brands_dict.items():
            brands_str += f"        '{brand}': {pattern},\n"
        brands_str += "    }"
        
        # Replace brands in config
        import re
        pattern = r"'brands': \{[^}]+\}"
        replacement = f"'brands': {brands_str}"
        content = re.sub(pattern, replacement, content)
        
        with open('all_in_one_reddit_monitor.py', 'w') as f:
            f.write(content)
        
        print(f"\n‚úÖ Configuration saved!")
        print(f"‚úÖ Tracking {len(brands)} brands: {', '.join(brands)}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Warning: Could not update brands in code: {e}")
        print("You may need to manually edit the CONFIG section in all_in_one_reddit_monitor.py")
    
    return True

def install_dependencies():
    """Install required dependencies"""
    print("\nüì¶ Installing dependencies...")
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'simple_requirements.txt'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Dependencies installed successfully!")
            return True
        else:
            print(f"‚ùå Error installing dependencies: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Error installing dependencies: {e}")
        return False

def main():
    """Main setup function"""
    print("üöÄ All-in-One Reddit Brand Monitor Setup")
    print("This will help you configure your Reddit monitoring system.\n")
    
    # Check if Python version is compatible
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 or higher is required")
        return False
    
    # Install dependencies
    if not install_dependencies():
        print("Please install dependencies manually: pip install -r simple_requirements.txt")
        return False
    
    # Setup credentials
    if not setup_credentials():
        return False
    
    print("\nüéâ Setup complete!")
    print("\nüìã Next steps:")
    print("1. Run the monitor: python all_in_one_reddit_monitor.py")
    print("2. Open your browser to: http://localhost:5000")
    print("3. Check the Dashboard tab for real-time stats")
    print("4. View Live Mentions tab to see brand mentions as they appear")
    
    print("\nüîß Configuration files created:")
    print("- .env (your credentials)")
    print("- reddit_monitor.db (will be created when you run the monitor)")
    
    print("\nüí° Tips:")
    print("- The system will start collecting mentions immediately")
    print("- Data is stored in a local SQLite database")
    print("- You can export data as CSV from the web interface")
    print("- Check the Settings tab for system status")
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1)